SOLID principles are object-oriented design concepts relevant to software development.
SOLID principles are an object-oriented approach that are applied to software structure design.
Single Responsibility Principle - One class should have one and only one responsibilty. Classes are defined with parameters and Getters-setters.
Open-Closed Principle - Software Components must be open for extension but closed for Modification. When we want to add a new functionality in any class then instead
                        of changing the whole logic in the class, we should extend the base class and override some methods.
                        For e.g. In struts we have Action class extended to override the request processing logic.
                        public class HelloWorldAction extends Action {

                          @Override
                          public ActionForward execute(ActionMapping mapping, ActionForm form, 
                            HttpServletRequest request, HttpServletResponse response)
                            throws Exception {

                                //Process the request
                          }
                        }
                        For e.g-
                        public interface IConnectionProvider {
                            public Connection establishconnection();
                        }
                        public class H2ConnectionProvider implements IConnectionProvider{

                            public Connection establishconnection() {
                                // TODO  : provide connection for H2 database and return the connection object
                                 return null;
                            }
                        }
                        public class MySQLConnectionProvider implements IConnectionProvider{

                          public Connection establishconnection() {
                              // TODO : provide connection for MySQL database
                              return null;
                          }
                      }
                      Now we want a connection the Oracle DB then, we dont need to modify the existing classes, we can implement & override accordingly.
                      public class OracleConnectionProvider implements IConnetionProvider{

                          public Connection establishconnection() {
                              // TODO : provide connection for Oracle database and return the connection object
                              return null;
                          }
                      }
                        https://www.javaguides.net/2018/02/open-closed-principle.html
Liskov Substitution Principle - Derived types must be Subtitutable for their base types. LSP means that the classes created by extending our class, 
                                should be able to fit in the application without fail. This is important for polymorphic behavior through inheritance.This requires the
                                objects of the subclasses to behave the same way as the superclass objects.
                                An example of LSP can be custom property editors in Spring framework. Spring provides property editors to represent properties differently 
                                than the object itself.
                                For example:
                                https://www.javaguides.net/2018/02/liskov-substitution-principle.html
                                Real Time Eg
                                Base- AccrualTransactionInterface -> editTransaction,addTransaction, getTransactionAmount()
                                Implementations
                                GrantTransaction
                                ExpiredTransaction -> addTransaction() -> throws Exception
                                In this case it is violation of LSP. And we need to define some other Interface that can cater the requirement of ExpiredTxn
Interface Segregation Principle - Clients should not be forced to implement unneccessary methods which they will not use.
                                  The Interface Segregation Principle advocates segregating a “fat interface” into smaller and highly cohesive interfaces, known 
                                  as “role interfaces”. Each “role interface” declares one or more methods for a specific behavior. Thus clients, instead of 
                                  implementing a “fat interface”, can implement only those “role interfaces” whose methods are relevant to them.
                                  Media player example. (For real time, AccrualTransaction eg given in LSP)
                                  https://www.javaguides.net/2018/02/interface-segregation-principle.html
Dependency Inversion Principle - Depends on abstraction, not on concretion. 
                                 E.g- Spring IOC (Inversion of Control Container), Factory Design Pattern.
                                 Benefits- Loose coupling
                                 https://www.javaguides.net/2018/02/dependency-inversion-principle.html
